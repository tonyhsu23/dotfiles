" ================== Vim General Settings ==================
let mapleader = "\<Space>"

" Enable matchit.vim
runtime macros/matchit.vim

" Set config filetype
autocmd BufNewFile,BufRead *.conf set filetype=conf

" Line numbers
set relativenumber
set number

" Cursor highlighting
set cursorline
set cursorcolumn

" Defult indentation
set expandtab
set shiftwidth=2
set softtabstop=2
set smartindent
set shiftround

" Keep at least 4 lines below cursor
set scrolloff=4

" Open new split panes to right and bottom
set splitbelow
set splitright

" Mark 80 characters
set colorcolumn=81

" Default was 4000(4s)
set updatetime=100
" ================== Vim General Settings ==================

" ================== Statusline Settings ===================
set laststatus=2
set statusline=
set statusline+=%{InsertSpace()}        " Put a leading space in

set statusline+=%f                      " Filename
set statusline+=%1*%m%*                 " Modified flag
set statusline+=\ %y                    " Filetype

set statusline+=%=                      " Right align from here on
set statusline+=Col:%c                  " Column number
set statusline+=\ \ Line:%l/%L          " Line # / total lines
set statusline+=\ \ %P%{InsertSpace()}  " Single space buffer

" For adding trailing spaces onto statusline
function! InsertSpace()
  return ' '
endfunction
" ================== Statusline Settings ===================

" ======================= Mappings =========================
" Command aliases for typoed commands
" (accidentally holding shift too long)
command! W w
command! Q q
command! E e

" Map tab to autocomplete
imap <Tab> <C-P>

" map snipmate autocomplete
imap <C-O> <Plug>snipMateNextOrTrigger

" Quick type letter j or k to escape
imap jk <esc>
imap kj <esc>

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Split edit zshrc
nmap <leader>zsh :sp ~/.zshrc<cr>

" Split edit gitconfig
nmap <leader>gcf :sp ~/.gitconfig<cr>

" Split edit vimrc. Type space, v, r in sequence to trigger
nmap <leader>vr :sp $MYVIMRC<cr>

" Source (reload) your vimrc. Type space, s, o in sequence to trigger
nmap <leader>so :source $MYVIMRC<cr>

" Copy the entire buffer into the system register
nmap <leader>co ggyG

" Format whole file
map <leader>fm mmgg=G`m

" Move to beginning/end of non-whitespace character
nnoremap <leader>bn _
nnoremap <leader>en g_

" Map binding pry
nnoremap <leader>bp obinding.pry<esc><cr>

" Map console.log
nnoremap <leader>cl oconsole.log();<left><left>
" ======================= Mappings =========================

" ================= Search Configuration ===================
set hlsearch   " Highlight while searching
set ignorecase " Case insensitive pattern matching
set smartcase  " Overrides ignorecase if pattern contains upcase

" Clear search highlight
map <leader>hl :noh<cr>

" Search visual selected words
vnoremap // y/<C-R>"<CR>
" ================= Search Configuration ===================

" ================ vim-markdown Settings  ==================
let g:vim_markdown_folding_disabled = 1
" ================ vim-markdown Settings  ==================

" ==================== netrw Settings ======================
let g:netrw_banner    = 0   " Hide banner
let g:netrw_winsize   = 20  " Default window size(%)
let g:netrw_liststyle = 3   " User tree style

" Open netrw on left side
nnoremap <leader>lx :Lexplore .<cr>
" ==================== netrw Settings ======================

" =================== Plugin Mappings ======================
" Replace ack with the Silver Searcher
let g:ackprg = 'ag --nogroup --nocolor --column'
" Use ack without showing first result
nnoremap <leader>ack :Ack!<Space>

" Fix trailing whitespaces
nmap <leader>ws :FixWhitespace<cr>
" =================== Plugin Mappings ======================

" ================ Vim-tmux-runner Settings ================
let g:VtrUseVtrMaps = 1
nnoremap <leader>cd :VtrSendCtrlD<cr>
nnoremap <leader>onr :VtrOpenRunner {'orientation': 'v', 'percentage': 30, 'cmd': ''}<cr>
nnoremap <leader>pry :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'pry'}<cr>
nnoremap <leader>irb :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'irb'}<cr>

" rspec-vim and vim-tmux-runner combination
let g:rspec_command = "call VtrSendCommand('rspec {spec}')"
map <leader>t :call RunCurrentSpecFile()<cr>
map <leader>s :call RunNearestSpec()<cr>
map <leader>l :call RunLastSpec()<cr>
map <leader>a :call RunAllSpecs()<cr>
" ================ Vim-tmux-runner Settings ================

" ===================== CtrlP Settings =====================
let g:ctrlp_max_files = 0 " no limit
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
" ===================== CtrlP Settings =====================

" ==================== Theme Setting =======================
" Set Solarized light theme
execute pathogen#infect()

syntax enable
" let g:solarized_termcolors=256 " For ubuntu to work
" set t_Co=256                   " For ubuntu to work
" set t_ut=                      " For ubuntu to work

" Solarized-light theme
" set background=light
" colorscheme solarized

" Tomorrow-night theme
colorscheme tomorrow-night

" Lucius dark low contrast theme
" set background=dark
" let g:lucius_contrast='low'
" colorscheme lucius
" ==================== Theme Setting =======================

" ========================= Vundle =========================
set nocompatible " Required by vundle
filetype off     " Required by vundle

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tpope/vim-rails'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-commentary'
Plugin 'kana/vim-textobj-user'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'ngmy/vim-rubocop'
Plugin 'tpope/vim-surround'
Plugin 'mattn/emmet-vim'
Plugin 'fatih/vim-go'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'christoomey/vim-tmux-runner'
Plugin 'thoughtbot/vim-rspec'
Plugin 'kchmck/vim-coffee-script'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'vim-scripts/camelcasemotion'
Plugin 'mileszs/ack.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-eunuch'

" vim-snipmate
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

" Colorscheme
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'vim-scripts/Lucius'

" Markdown
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

call vundle#end()         " Required by vundle
filetype plugin indent on " Required by vundle
" ========================= Vundle =========================
